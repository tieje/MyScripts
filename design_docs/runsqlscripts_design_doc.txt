8/19/2020

Input needed in order:
1. Location of scripts to run.
	Press Enter if the command line is already in the correct directory.
	- If a "zz_drive_[0-9] file exists in the folder, then only run this instead.
2. Check for a spool for each script. If there is no spool in the first line, then run the spool command before running the script.
3. Run the script.
	Next run the mhklogchecker
	If there is an error, print the error_results.txt file
	    If it's a zz_drive_[0-9] file, then it won't paste
4. If there is a "grant to" prompt, input sc_base
5. Run the mhklogchecker.


Found hostname from the following query:
select host_name from v$instance

I won't be using sqlplus_commando python package because it's unfinished.
I'll look in to Popen, PIPE, and sys for python instead.
It will be a bit more learning, but I think it will be rewarding.

https://docs.python.org/3.7/library/subprocess.html#subprocess.Popen.communicate

internal Popen object is automatically created with stdout=PIPE and stderr=PIPE

subprocess.PIPE
Special value that can be used as the stdin, stdout or stderr argument to Popen and indicates that a pipe to the standard stream should be opened. Most useful with Popen.communicate().

output
Output of the child process if it was captured by run() or check_output(). Otherwise, None.

stdoutÂ¶
Alias for output, for symmetry with stderr.

https://stackoverflow.com/questions/7681715/whats-the-difference-between-subprocess-popen-and-call-how-can-i-use-them

I think I finally understand what I want to do.


#0. Read the top line of the sql file to make sure that the file contains a spool option. If not, then include spool at the beginning and end your commands.
#1. I'm going to to want to use Popen() to open sqlplus.
	# I'll Popen() because I will not be waiting for the sqlplus command to finish in the window's cmd prompt
#2. I'll need to interpret stout=PIPE so I can determine if I'll need to grant permission to sc_base or not. Also I need to check if an error occurs.
#3. I need to run the script.
#4. I'll run the mhklogchecker immediately afterwards.


This doesn't work, but it's a good reference.
https://o-dba.blogspot.com/2017/03/python-for-oracle-using-sqlplus.html

8/23/2020

From testing, I've determined that the best way to solve running scripts is to create a zz_drive of my own.

Input: location of scripts to run, name of the database to run them in
sanitizing: database name must exist in a list derived from tnsnames file
Output:
#1. zz_drive.sql file will be created and ran.
	The script will go over each sql script in the folder.
		The user will be prompted to write the full name of the sequence of scripts. (must type "first", "second")
		The user input will written to prompt at the end of the questions.
	The script will print the contents of the new txt file asking for confirmation. "Is this correct? If it is then enter 'yes'"
#2. When a sql script is run, it will be moved to folder called scripts ran at [current date]
#3. The mhklogchecker will be run on that log to check for errors.
	If any errors exist, you will be prompted to check the error_results.txt file for that specific sql script. The error_results.txt file will be prefixed to error_results.txt file.
	If the errors are ok, then keep running the script, if they are not ok, then the script will no longer run.
	If the script is stopped, the sql files will not be run because they are already in a different folder... Or at least that's how I hope it works.
#4. When all the scripts were run, a final mhklogchecker will be called on the folder containing all the logs.

